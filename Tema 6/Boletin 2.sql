/*Ejercicio 41*/
SELECT REFERENCIA, SUM (UNIDADES * (PRECIO-PRECIO *DTO)) IMPORTE
FROM LPEDIDO
GROUP BY REFERENCIA;

/*Ejercicio 42 TERMINAR
SELECT NALBARAN, SUM(UNIDADES * (PRECIO - PRECIO * )) 
FROM LALBARAN
GROUP BY NALBARAN;*/

/*Ejercicio 43*/
SELECT CATEGORIA, AVG(PRECIO_VENTA)
FROM ARTICULO
GROUP BY CATEGORIA
/*ESTO ES PARA COMPROBAR EQUIVALENCIA*/
MINUS
SELECT CATEGORIA, SUM(PRECIO_VENTA)/COUNT(PRECIO_VENTA)
FROM ARTICULO
GROUP BY CATEGORIA;

/*EJERCICIO 44*/
SELECT NPEDIDO, AVG(UNIDADES *(PRECIO - PRECIO * DTO))
FROM LALBARAN
WHERE NPEDIDO IS NOT NULL
GROUP BY NPEDIDO;

/*EJERCICIO 45*/
SELECT REFERENCIA, SUM (UNIDADES)
FROM LPEDIDO
WHERE UNIDADES > 2
GROUP BY REFERENCIA;

/*EJERCICIO 46*/
SELECT NALBARAN, COUNT(*)
FROM LALBARAN
GROUP BY NALBARAN;

/*EJERCICIO 47*/
SELECT CLIENTE, SUM (TOTAL_PEDIDO)
FROM PEDIDO
GROUP BY CLIENTE
ORDER BY CLIENTE;

/*EJERCICIO 48*/
/*ESTO ES UNA SUBCONSULTA*/
SELECT *
FROM
(SELECT CATEGORIA, AVG(PRECIO_VENTA) IMPORTE1, SUM(PRECIO_VENTA)/COUNT(PRECIO_VENTA) IMPORTE2
FROM ARTICULO
WHERE CATEGORIA IN ('CARN', 'FRUT', 'CONF')
GROUP BY CATEGORIA)TABLA
WHERE IMPORTE1 = IMPORTE2;

/*EJERCICIO 49*/
SELECT REFERENCIA, SUM(UNIDADES)
FROM LPEDIDO
GROUP BY REFERENCIA
HAVING SUM(UNIDADES) > 50;

/*EJERCICIO 50*/
/*NVL HACE QUE TODOS LOS NULOS EN LA CONSULTA LES PONE 0 PARA QUE HAGA LA CONSULTA*/
SELECT CLIENTE, AVG(NVL(TOTAL_PEDIDO,0))
FROM PEDIDO
GROUP BY CLIENTE
HAVING AVG(NVL(TOTAL_PEDIDO,0)) > 200;

/*EJERCICIO 51*/
SELECT NALBARAN, SUM(UNIDADES)
FROM LALBARAN
GROUP BY NALBARAN
HAVING SUM(UNIDADES) BETWEEN 10 AND 50;

/*EJERCICIO 52*/
SELECT NPEDIDO, COUNT(NLINEA)
FROM LPEDIDO
WHERE DTO = 0.1
GROUP BY NPEDIDO
HAVING COUNT(NLINEA)>3;

/*EJERCICIO 53*/
SELECT CATEGORIA, MIN(EXISTENCIAS), MAX(EXISTENCIAS)
FROM ARTICULO
WHERE UPPER(DESCRIPCION) LIKE '%MAGDALENA%'
GROUP BY CATEGORIA
HAVING MAX(EXISTENCIAS) -  MIN(EXISTENCIAS) BETWEEN 50 AND 100;

/*EJERCICIO 54*/
SELECT PROVINCIA, UPPER(POBLACION), AVG(VENTAS)
FROM CLIENTE
WHERE UPPER(RAZON_SOCIAL) LIKE '%SUPERMERCADO%'
GROUP BY PROVINCIA, UPPER(POBLACION)
HAVING  AVG(VENTAS) < MIN(VENTAS) * 2;

/*EJERCICIO 55*/
SELECT NALBARAN, SUM(UNIDADES * (PRECIO - PRECIO*DTO)), AVG(UNIDADES * (PRECIO - PRECIO*DTO))
FROM LALBARAN
WHERE /* ESTO LO PIDE EL EJRCICIO PERO SI NO NO SALE NADA NALBARAN BETWEEN 1 AND 25 AND*/ NPEDIDO IS NULL
GROUP BY NALBARAN
HAVING SUM(UNIDADES * (PRECIO - PRECIO*DTO)) > 2* AVG(UNIDADES * (PRECIO - PRECIO*DTO)); 

/*EJERCICIO 56*/
SELECT NPEDIDO, MAX(PRECIO - PRECIO * DTO), AVG(PRECIO - PRECIO * DTO)
FROM LPEDIDO
WHERE (UND_PEND = 0 OR UND_PEND IS NULL) OR (DTO BETWEEN 0.2 AND 0.4)
GROUP BY NPEDIDO
HAVING AVG(PRECIO - PRECIO * DTO) BETWEEN MAX(PRECIO - PRECIO * DTO)/2 AND MAX(PRECIO - PRECIO * DTO) ;